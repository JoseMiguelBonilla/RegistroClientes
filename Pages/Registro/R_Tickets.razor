@page "/RegistroTickets"
@page "/RegistroTickets/{TicketsId:int}"
@inject TicketsBLL TicketsBLL
@using RegistroClientes.Models
@inject NotificationService notificationService

<EditForm Model="Tickets" OnValidSubmit="Guardar">
     <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Mensajes </h3>
            </div>
            <div class="card-body">
                @*BuscarId*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Tickets.TicketsId" class="form-control" aria-describedby="buscarButton" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
                            <i class="oi oi-magnifying-glass" />
                        </button>
                    </div>
                </div>

                @*TicketsId*@
                <div class="mb-3">
                    <label class="form-label">TicketsId</label>
                    <InputNumber @bind-Value="Tickets.TicketsId" class="form-control" />
                    <ValidationMessage For="@(() => Tickets.TicketsId)" />
                </div>

                @*Nombre*@
                <div class="mb-3">
                    <label class="form-label">Nombre</label>
                    <InputText @bind-Value="Tickets.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => Tickets.Nombre)" />
                </div>

                  @*Mensaje*@
                <div class="mb-3">
                    <label class="form-label">Mensaje</label>
                    <InputText @bind-Value="Tickets.Mensaje" class="form-control" />
                    <ValidationMessage For="@(() => Tickets.Mensaje)" />
                </div>

              

            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
                    <button type="submit" class="btn btn-success"> <i class="oi oi-document" /> Guardar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="oi oi-trash" /> Eliminar</button>
                </div>
            </div>
        </div>
    </div>


</EditForm>




@code 
{
    [Parameter]
    public int TicketsId  { get; set; }
    public Tickets Tickets = new Tickets();

    protected override void OnInitialized()
    {
        if (TicketsId > 0)
        {
            this.Tickets.TicketsId = this.TicketsId;
            Buscar();
        }
    }

    public void Buscar()
    {
      
    }
    public void Nuevo()
    {
        this.Tickets = new Tickets();
    }

    public void Guardar()
    {
        if (!Validar())
        {
            notificationService.ShowNotification(
                titulo: "Validacion",
                mensaje: "Error, Revise los campos",
                NotificationSeverity.Error);
            return;
        }

        var guardo = TicketsBLL.Guardar(this.Tickets);
        if (guardo)
        {
            notificationService.ShowNotification(
                titulo: "Exito",
                mensaje: "Guardo correctamente!",
                NotificationSeverity.Success);
            Nuevo();
        }

        else
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "Ocurrio un error y no fue posible guardad",
                NotificationSeverity.Error);
        }
    }

    public void Eliminar()
    {
        Buscar();
        if (TicketsBLL.Eliminar(this.Tickets))
        {
            notificationService.ShowNotification(
                titulo: "Exito",
                mensaje: "Eliminado con Exito!",
                NotificationSeverity.Success);
            Nuevo();
        }
        else
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "Ocurrio un error y no fue posible eliminar",
                NotificationSeverity.Error);
        }
    }

    public bool Validar()
    {
        return true;
    }

}